;This is an example launcher INI that is part of the PortableApps.com Template
;It uses a standard Windows INI format, so any line starting with a semi-colon is treated as a comment
;It is recommended that you use a coding text editor to edit this, preferably one with context highlighting
;If editing with Notepad++, be sure you have turned off the option to add a BOM as it will break the INI
;Full details: http://portableapps.com/manuals/PortableApps.comLauncher/

[Launch]
;This section details how an app is started and where it works
;ProgramExecutable is the EXE to run to start the app relative to the AppNamePortable\App directory
ProgramExecutable=AppName\AppName.exe
;ProgramExecutable64 is an optional EXE to run if running on Windows 64-bit
;ProgramExecutable64=AppName\AppName64.exe
;CommandLineArguments is an optional setting that will cause the above EXE to be launched with this string passed
;CommandLineArguments=-settings=%PAL:DataDir%\
;WorkingDirectory is the directory that will be used when launching which other items will be relative to. Use should be avoided when possible as it will prevent passing multiple relative file locations via command line
;WorkingDirectory=%PAL:AppDir%\AppName
;DirectoryMoveOK indicates whether a directory can be moved to a different path rather than just supporting drive letter changes
DirectoryMoveOK=yes
;SupportsUNC indicates whether an app can run from a Windows UNC path, often referred to as a network path
SupportsUNC=yes
;RunAsAdmin indicates whether an app requires admin rights to run. This should generally be avoided when possible
;Details: http://portableapps.com/manuals/PortableApps.comLauncher/ref/launcher.ini/launch.html#runasadmin
;RunAsAdmin=try

[Activate]
;This section lets the launcher know what functionality needs to be included.
;IMPORTANT: Any changes to this section will require the launcher to be recompiled.
;Registry indicates whether we will be reading or writing to the registry. If not, setting to false will make the launcher slightly smaller and cause it to start slightly faster.
Registry=true
;Java indicates whether the app needs Java to run
;Java=find
;XML indicates whether the launcher will need to read or write to XML paths within settings files of the app. If not, setting to false will make the launcher slightly smaller and cause it to start slightly faster.
XML=true

[Environment]
;This section lets the launcher know what environment variables need to be set. If not needed, this can be removed.
AppNameExamplePath=%PAL:AppDir%\App\AppName

[RegistryKeys]
;This section allows you to backup and restore a given key and the keys below it within the registry.  Any existing data in the same location will be backed up before the app is run and restored on exit.  The portable app's data will be stored in a .reg key with the name at the beginning of each line within the Data directory.  It's best to take as little of the registry as possible.  In our example, taking the whole ExamplePublisher section isn't necessary because all our app's data is stored within AppName.  If we took ExamplePublisher, we might run into problems with other apps from the same publisher.
AppName=HKCU\Software\ExamplePublisher\AppName
;If there is some data in the registry that the app creates but does not need to be saved between sessions of the portable app, it can be handled using a - instead of a name for a .reg file as follows:
;-=HKCU\Software\ExamplePublisher\GarbageData

[RegistryValueWrite]
;These are registry values to set for running the portable application, useful for things like disabling file association writing. They come in the form HK??\*\Key\Value=REG_[TYPE]:[value]; the key name is the place in the registry, with the value appended to it after a final slash, and the value is of the form REG_TYPE:value; REG_TYPE: is optional, and defaults to REG_SZ (a string).

;Note: if there is any possibility that the value does contain a colon, write the type explicitly.

;Examples: HKCU\Software\AppName\Key\Value=REG_DWORD:16, HKCU\Software\AppName\Key\Value2=REG_SZ:%PAL:DataDir%

[RegistryCleanupIfEmpty]
;This section allows you to remove sections of the registry if they are empty when the app exits. In this example, we're removing the app publisher's section if no local apps from the same publisher exit after our portable app exits so we don't leave behind an empty bit of registry.
1=HKCU\Software\ExamplePublisher

;ENVIRONMENT VARIABLES FOR USE WITH DIRECTORIES AND FILES
;These next sections deal with directory and file handling.  For these, environment variable substitutions will apply
;Environment variables: http://portableapps.com/manuals/PortableApps.comLauncher/ref/envsub.html#ref-envsub

[RegistryCleanupForce]
;These are registry keys which get removed after the application has run. This is useful if there is a tree of useless information which will be left behind, for example, if something stores temporary data to HKEY_CURRENT_USER\Software\AppName\Temp. Remove it with a line in here.

;Example: 1=HKCU\Software\AppName\Temp

[RegistryValueBackupDelete]
;These are registry values which get backed up before hand and restored later, but any value which may have been set while the portable application is running will be deleted. This can be useful for “dead” values which serve no purpose and so there is no point in saving them anywhere.
1=HKCU\Software\Publisher\AppName\Value

[DirectoriesMove]
;This section allows you to configure directories that need to be moved from the Data directory to either the app's directory or to the local machine.  Many standard environment variables are supported here including things like APPDATA.

;This first entry will move the contents of AppNamePortable\Data\AppNameConfig to C:\Users\[user]\AppData\Roaming\ExamplePublisher\AppName while the app is running and back when complete.  Any existing data will be backed up and restored.
AppNameConfig=%APPDATA%\ExamplePublisher\AppName

;This second entry will move the contents of AppNamePortable\Data\AppNamePortableConfig to AppNamePortable\App\AppName while the app is running and back when complete.
AppNamePortableConfig=%PAL:AppDir%\AppName\Config

;This entry indicates that the contents of C:\Users\[user]\AppData\Roaming\ExamplePublisher\GarbageData should be disposed of when the app is done running.  Any existing data will be backed up and restored when complete.
-=%APPDATA%\ExamplePublisher\GarbageData

[FilesMove]
;This section allows you to configure directories that need to be moved from the Data directory to either the app's directory or to the local machine.  Many standard environment variables are supported here including things like APPDATA.

;This first entry will move the file AppNamePortable\Data\appnameexample.config to C:\Users\[user]\AppData\Roaming\ExamplePublisher while the app is running and back when complete.  Any existing data will be backed up and restored.
appnameexample.config=%APPDATA%\ExamplePublisher

;This second entry will move the file of AppNamePortable\Data\appnameportableexample.config to AppNamePortable\App\AppName while the app is running and back when complete.
appnameportableexample.config=%PAL:AppDir%\AppName

[DirectoriesCleanupIfEmpty]
;This section allows you to remove directories if they are empty when the app exits. In this example, we are removing the ExamplePublisher directory if it is empty so we don't leave a blank directory behind from the app.
1=%APPDATA%\ExamplePublisher


;FILEWRITE
;These entries allow you to update the paths within configuration and registry files
;The entries use the standard environment variables along with some additional modifiers
;Environment variables: http://portableapps.com/manuals/PortableApps.comLauncher/ref/envsub.html#ref-envsub

;For these examples, we'll update the relative paths in both a standard config file and a .reg file

;FileWrite1 to 3 will update the drive letter, relative path, and full path in a config file
;Note the order from most specific path to least, ensuring we don't change a drive letter alone before a full path
[FileWrite1]
Type=Replace
File=%PAL:DataDir%\settings\appnameportableexample.config
Find=%PAL:LastDrive%%PAL:LastPackagePartialDir%\
Replace=%PAL:Drive%%PAL:PackagePartialDir%\

[FileWrite2]
Type=Replace
File=%PAL:DataDir%\settings\appnameportableexample.config
Find=%PAL:LastDrive%%PAL:LastPortableAppsBaseDir%\
Replace=%PAL:Drive%%PAL:PortableAppsBaseDir%\

[FileWrite3]
Type=Replace
File=%PAL:DataDir%\settings\appnameportableexample.config
Find=%PAL:LastDrive%\
Replace=%PAL:Drive%\

;FileWrite4 to 6 will update the drive letter, relative path, and full path in a registry file
;Note that we use double backslashes for the paths instead of singles because that is the way a .reg file stores them

[FileWrite4]
Type=Replace
File=%PAL:DataDir%\settings\AppName.reg
Find=%PAL:LastDrive%%PAL:LastPackagePartialDir:DoubleBackslash%\\
Replace=%PAL:Drive%%PAL:PackagePartialDir:DoubleBackslash%\\

[FileWrite5]
Type=Replace
File=%PAL:DataDir%\settings\AppName.reg
Find=%PAL:LastDrive%%PAL:LastPortableAppsBaseDir:DoubleBackslash%\\
Replace=%PAL:Drive%%PAL:PortableAppsBaseDir:DoubleBackslash%\\

[FileWrite6]
Type=Replace
File=%PAL:DataDir%\settings\AppName.reg
Find=%PAL:LastDrive%\\
Replace=%PAL:Drive%\\

;FileWrite 7 is an example of writing a value directly to a file, to specify a path to plugins for example

;[FileWrite7]
;Type=INI
;File=%PAL:DataDir%\settings\appnameportableexample.config
;Section=Paths
;Key=PluginsPath
;Value=%PAL:AppDir%\AppName\plugins

; [FileWrite7]
; Type=ConfigWrite
; CaseSensitive=false
; File=%PAL:DataDir%\settings\data.conf
; Entry='PluginsPath='
; Value=%PAL:CurrentDrive%\

; [FileWrite7]
; File=%PAL:DataDir%\freecol\freecol\options.xml
; Type=XML attribute
; XPath=/clientOptions/languageOption[@id="model.option.languageOption"]
; Attribute=%PAL:LanguageCustom%
; Value=%PAL:LanguageCustom%

; [FileWrite7]
; File=%PAL:DataDir%\freecol\freecol\options.xml
; Type=XML text
; XPath=/clientOptions/languageOption[@id="model.option.languageOption"]
; Value=%PAL:LanguageCustom%

;Language switching is a bit beyond an example package such as this.  The PortableApps.com Launcher does support automatic language switching with the platform but it is not required for portable apps.
;Details: http://portableapps.com/manuals/PortableApps.comLauncher/ref/launcher.ini/language.html
; A full table of all the values is available in Language variable values.
; PortableApps.comLanguageCode – e.g. “en”, “pt”, “pt-br”
; PortableApps.comLocaleCode2 – e.g. “en”, “pt”, “pt”
; PortableApps.comLocaleCode3 – e.g. “eng”, “por”, “por”
; PortableApps.comLocaleglibc – e.g. “en_US”, “pt”, “pt_BR”
; PortableApps.comLocaleID – e.g. “1033”, “2070”, “1046”
; PortableApps.comLocaleWinName – e.g. “LANG_ENGLISH”, “LANG_PORTUGUESE”, “LANG_PORTUGUESEBR”
; PortableApps.comLocaleName – e.g. “English”, “Portuguese”, “PortugueseBR” (note: these will be upper case until implemented in the PortableApps.com Platform)

;[Language]
;Base=%PortableApps.comLanguageCode%
;CheckIfExists=%PAL:AppDir%\Languages\%PAL:LanguageCustom%.locale
;DefaultIfNotExists=en

;[LanguageStrings]
;ar-sa=ar

; [LanguageFile]
; Type=INI
; File=%PAL:DataDir%\settings\appnameportableexample.config
; Section=Language
; Key=Language
; TrimRight=

; [LanguageFile]
; Type=ConfigWrite
; CaseSensitive=false
; File=%PAL:DataDir%\settings\data.conf
; Entry='PluginsPath='
; TrimRight=

; [LanguageFile]
; File=%PAL:DataDir%\freecol\freecol\options.xml
; Type=XML attribute
; XPath=/clientOptions/languageOption[@id="model.option.languageOption"]
; Attribute=%PAL:LanguageCustom%
; TrimRight=

; [LanguageFile]
; File=%PAL:DataDir%\freecol\freecol\options.xml
; Type=XML text
; XPath=/clientOptions/languageOption[@id="model.option.languageOption"]
; TrimRight=

;Lastly, we'd need to save our changes to the language setting back to the configuration file

;[FileWrite8]
;Type=INI
;File=%PAL:DataDir%\settings\appnameportableexample.config
;Section=Language
;Key=Language
;Value=%PAL:LanguageCustom%