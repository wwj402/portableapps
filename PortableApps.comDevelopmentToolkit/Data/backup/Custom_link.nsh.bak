/* $LauncherFile=z:\PortableAppz\ReplaceStudioPortable\App\AppInfo\Launcher\ReplaceStudioPortable.ini
$EXEFILE=ReplaceStudioPortable.exe
$AppID=ReplaceStudioPortable
$BaseName=ReplaceStudioPortable
$EXEDIR=z:\PortableAppz\ReplaceStudioPortable */

/* 
Function .onInit          ;{{{1
	${RunSegment} Custom
	${RunSegment} Core
	${RunSegment} Temp
	${RunSegment} Language
	${RunSegment} OperatingSystem
	${RunSegment} RunAsAdmin
FunctionEnd

Function Init             ;{{{1
	${RunSegment} Custom
	${RunSegment} Core
	${RunSegment} PathChecks
	${RunSegment} Settings
	${RunSegment} DriveLetter
	${RunSegment} DirectoryMoving
	${RunSegment} Variables
	${RunSegment} Language
	${RunSegment} Registry
	${RunSegment} Java
	${RunSegment} RunLocally
	${RunSegment} Temp
	${RunSegment} InstanceManagement
	${RunSegment} SplashScreen
	${RunSegment} RefreshShellIcons
FunctionEnd

Function Pre              ;{{{1
	${RunSegment} Custom
	${RunSegment} RunLocally
	${RunSegment} Temp
	${RunSegment} Environment
	${RunSegment} ExecString
FunctionEnd

Function PrePrimary       ;{{{1
	${RunSegment} Custom
	${RunSegment} DriveLetter
	${RunSegment} Variables
	${RunSegment} DirectoryMoving
	${RunSegment} FileWrite
	${RunSegment} FilesMove
	${RunSegment} DirectoriesMove
	;${RunSegment} RegisterDLL
	${RunSegment} RegistryKeys
	${RunSegment} RegistryValueBackupDelete
	${RunSegment} RegistryValueWrite
	${RunSegment} Services
FunctionEnd

Function PreSecondary     ;{{{1
	${RunSegment} Custom
	;${RunSegment} *
FunctionEnd

Function PreExec          ;{{{1
	${RunSegment} Custom
	${RunSegment} RefreshShellIcons
	${RunSegment} WorkingDirectory
FunctionEnd

Function PreExecPrimary   ;{{{1
	${RunSegment} Custom
	${RunSegment} Core
	${RunSegment} SplashScreen
FunctionEnd

Function PreExecSecondary ;{{{1
	${RunSegment} Custom
	;${RunSegment} *
FunctionEnd

Function PostPrimary      ;{{{1
	${RunSegment} Services
	${RunSegment} RegistryValueBackupDelete
	${RunSegment} RegistryKeys
	${RunSegment} RegistryCleanup
	;${RunSegment} RegisterDLL
	${RunSegment} Qt
	${RunSegment} DirectoriesMove
	${RunSegment} FilesMove
	${RunSegment} DirectoriesCleanup
	${RunSegment} RunLocally
	${RunSegment} Temp
	${RunSegment} Custom
FunctionEnd

Function PostSecondary    ;{{{1
	;${RunSegment} *
	${RunSegment} Custom
FunctionEnd

Function Post             ;{{{1
	${RunSegment} RefreshShellIcons
	${RunSegment} Custom
FunctionEnd
 */

${SegmentFile}

!include "x64.nsh"
!include "UserForEachINIPair.nsh"

!macro PathIsUNC _PATH _FLAG
	Push $0
	Push $1
	${GetRoot} ${_PATH} $0
	StrCpy $0 "$0\"
	System::Call 'Kernel32::GetDriveType(t r0)i.r1'
	; MessageBox MB_OK "$1"
	${If} $1 = 4
		StrCpy ${_FLAG} "isunc"
	${Else}
		StrCpy ${_FLAG} "notunc"
	${EndIf}
	Pop $1
	Pop $0
!macroend

!macro PathIsNTFS _PATH _FLAG
	Push $0
	Push $1
	${GetRoot} ${_PATH} $0
	StrCpy $0 "$0\"
	System::Call 'Kernel32::GetVolumeInformation(t "$0",t,i ${NSIS_MAX_STRLEN},*i,*i,*i,t.r1,i ${NSIS_MAX_STRLEN})i.r0'
	; MessageBox MB_OK "$1"
	${If} $0 <> 0
		${If} $1 == ${FSFLAG}
			StrCpy ${_FLAG} "isntfs"
		${Else}
			StrCpy ${_FLAG} "notntfs"
		${EndIf}
	${Else}
		StrCpy ${_FLAG} "false"
	${EndIf}
	Pop $1
	Pop $0
!macroend

!macro DstDirCheck _SRCPATH _DSTPATH
	Push $0
	Push $1
	Push $2
	Push $3
	ExpandEnvStrings $0 "${_SRCPATH}"
	${GetRoot} "$0" $1
	${if} $1 == ""
		StrCpy $0 "$EXEDIR\Data\${_SRCPATH}"
		ExpandEnvStrings $0 "$0"
	${EndIf}
	ExpandEnvStrings $1 "${_DSTPATH}"
	${If} ${FileExists} "$1"
		${GetFileAttributes} "$1" "REPARSE_POINT" $2
		${If} $2 == "1"
			${If} ${FileExists} "$1\${FLAGFILE}"
				RMDir "$1"
			${Else}
				Rename "$1" "$1_$BaseName"
			${EndIf}
		${Else}
			${If} ${FileExists} "$1\${FLAGFILE}"
				RMDir "$1"
			${Else}
				Rename "$1" "$1_$BaseName"
			${EndIf}
		${EndIf}
	${EndIf}
	Pop $3
	Pop $2
	Pop $1
	Pop $0
!macroend

!macro JDKPathPar _JDKPATH _JDKPATHPAR
	Push $0
	Push $1
	ExpandEnvStrings $0 "${_JDKPATH}"
	${If} $0 != ""
		${GetRoot} "$0" $1
		${If} $1 != ""
			GetFullPathName ${_JDKPATHPAR} "$0"
		${Else}
			GetFullPathName ${_JDKPATHPAR} "$EXEDIR\$0"
		${EndIf}
	${EndIf}
	Pop $1
	Pop $0
!macroend

Function PathParse
	Exch $0
	Push $1
	ExpandEnvStrings $0 "$0"
	${GetRoot} "$0" $1
	${if} $1 == ""
		StrCpy $0 "${BASEDLLDIR}\$0"
		GetFullPathName $0 "$0"
	${Else}
		GetFullPathName $0 "$0"
	${EndIf}
	Pop $1
	Exch $0
FunctionEnd

Var SecString
Var SecVaule
Var SrcUncFlag
Var DstUncFlag
Var SrcNtfsFlag
Var DstNtfsFlag
Var OsFlag
Var OptFlag
Var usedexe
Var OSarch

!define IniItemMove '!insertmacro IniItemMove'
!define PathIsNTFS '!insertmacro PathIsNTFS'
!define PathIsUNC '!insertmacro PathIsUNC'
!define DstDirCheck '!insertmacro DstDirCheck'
!define JDKPathPar '!insertmacro JDKPathPar'

!define USERINIPATH "$EXEDIR\$BaseName.ini"
!define LAUNCHERINIPATH "$EXEDIR\App\AppInfo\Launcher\$BaseName.ini"
!define LINKSEC "DirectoriesLink"
!define MOVESEC "DirectoriesMove"
!define FILESEC "FilesMove"
!define FLAGFILE "sym_link.ini"
!define LINKINIPATH "$EXEDIR\LinkStatus.ini"
!define LINKOPTSEC "LinkStatus"
!define SYBEXE "NTLinksMaker.exe"
!define SYBEXE64 "NTLinksMaker64.exe"
!define SYBDIR "$EXEDIR\Data\NTLinksMaker"
!define SYBSWITCH1 "/q /n /b"
!define SYBSWITCH2 "/q /n /b /s"
!define FSFLAG "NTFS"
!define APPJDK "JAVA_HOME"

${SegmentInit}

	${SetEnvironmentVariable} PORTABLEBASEDIR $EXEDIR
	${SetEnvironmentVariable} PORTABLEBASENAME $BaseName
	SetShellVarContext all
	${SetEnvironmentVariable} ALLUSERDOCUMENTS $DOCUMENTS
	SetShellVarContext current

	IfFileExists "$EXEDIR\App\DefaultData\*.*" 0 +3
	IfFileExists "$EXEDIR\Data\*.*" +2 0
	CopyFiles "$EXEDIR\App\DefaultData\*.*" "$EXEDIR\Data"

	${UserForEachINIPair} "${USERINIPATH}" "${LINKSEC}" $SecString $SecVaule
		StrCpy $0 "$EXEDIR\Data\$SecString"
		${IfNot} ${FileExists} "$0\${FLAGFILE}"
			WriteINIStr "$0\${FLAGFILE}" "${FLAGFILE}" "DIR" "$EXEDIR"
		${Else}
			${ConfigRead} "$0\${FLAGFILE}" "DIR=" $1
			${If} $1 != "$EXEDIR"
				${ConfigWrite} "$0\${FLAGFILE}" "DIR=" "$EXEDIR" $2
			${EndIf}
		${EndIf}
	${UserNextINIPair}

	${LineSum} "$EXEDIR\$BaseName.ini" $0
	${IfNot} ${FileExists} "$EXEDIR\$BaseName.ini"
	${OrIf} $0 < 16
		; IfFileExists "$EXEDIR\$BaseName.ini" +16 0
		WriteINIStr "$EXEDIR\$BaseName.ini" "$BaseName" UserName ""
		WriteINIStr "$EXEDIR\$BaseName.ini" "$BaseName" AdditionalParameters ""
		WriteINIStr "$EXEDIR\$BaseName.ini" "$BaseName" DisableSplashScreen "true"
		WriteINIStr "$EXEDIR\$BaseName.ini" "$BaseName" RunLocally "false"
		WriteINIStr "$EXEDIR\$BaseName.ini" "$BaseName" SingleAppInstance ""
		WriteINIStr "$EXEDIR\$BaseName.ini" "$BaseName" SinglePortableAppInstance ""
		WriteINIStr "$EXEDIR\$BaseName.ini" "$BaseName" AlwaysUse32Bit ""
		WriteINIStr "$EXEDIR\$BaseName.ini" "$BaseName" X64RegView ""
		WriteINIStr "$EXEDIR\$BaseName.ini" "$BaseName" X64FSRedirection "true"
		WriteINIStr "$EXEDIR\$BaseName.ini" "${LINKSEC}" "linkdir" "$\r$\n"
		WriteINIStr "$EXEDIR\$BaseName.ini" "${MOVESEC}" "movedir" "$\r$\n"
	${EndIf}

	${If} ${RunningX64}
		StrCpy $usedexe "${SYBDIR}\${SYBEXE64}"
		StrCpy $OSarch 64
/* 		ReadINIStr $0 "$EXEDIR\$BaseName.ini" "$BaseName" X64RegView
		${If} $0 == 64
			SetRegView 64
		${EndIf}
		ReadINIStr $0 "$EXEDIR\$BaseName.ini" "$BaseName" X64FSRedirection
		${If} $0 == false
			${DisableX64FSRedirection}
		${EndIf} */
	${Else}
		StrCpy $usedexe "${SYBDIR}\${SYBEXE}"
	${EndIf}

	ReadINIStr $0 "$EXEDIR\$BaseName.ini" "$BaseName" AlwaysUse32Bit
	${If} $0 == true
		StrCpy $Bits 32
	${EndIf}

	${If} $Bits == 64
		ReadINIStr $0 "$EXEDIR\App\AppInfo\Launcher\$BaseName.ini" Launch ProgramExecutable64
		${If} $0 != ""
		${AndIf} ${FileExists} "$EXEDIR\App\$0"
			SetRegView 64
			${GetParent} "$EXEDIR\App\$0" $1
			${SetEnvironmentVariable} ProgramDir $1
		${Else}
		 	ReadINIStr $0 "$EXEDIR\$BaseName.ini" "$BaseName" X64RegView
			${If} $0 == 64
				SetRegView 64
			${EndIf}
			ReadINIStr $0 "$EXEDIR\$BaseName.ini" "$BaseName" X64FSRedirection
			${If} $0 == false
				${DisableX64FSRedirection}
			${EndIf}
			ReadINIStr $0 "$EXEDIR\App\AppInfo\Launcher\$BaseName.ini" Launch ProgramExecutable
			${GetParent} "$EXEDIR\App\$0" $1
			${SetEnvironmentVariable} ProgramDir $1
		${EndIf}
	${EndIf}
	${If} $Bits == 32
		${If} $OSarch == 64
			ReadINIStr $0 "$EXEDIR\$BaseName.ini" "$BaseName" X64RegView
			${If} $0 == 64
				SetRegView 64
			${EndIf}
			ReadINIStr $0 "$EXEDIR\$BaseName.ini" "$BaseName" X64FSRedirection
			${If} $0 == false
				${DisableX64FSRedirection}
			${EndIf}
		${EndIf}
		ReadINIStr $0 "$EXEDIR\App\AppInfo\Launcher\$BaseName.ini" Launch ProgramExecutable	
		${GetParent} "$EXEDIR\App\$0" $1
		${SetEnvironmentVariable} ProgramDir $1
	${EndIf}

	ClearErrors
	ReadINIStr $0 "$EXEDIR\$BaseName.ini" "$BaseName" UserName
	${IfNot} ${Errors}
	${AndIf} $0 != ""
		${SetEnvironmentVariable} ProfileUserName $0
	${EndIf}

	ReadINIStr $0 "$EXEDIR\$BaseName.ini" "$BaseName" SingleAppInstance
	${If} $0 == false
	${OrIf} $0 == true
		WriteINIStr "$EXEDIR\App\AppInfo\Launcher\$BaseName.ini" Launch SingleAppInstance $0
	${EndIf}
	ReadINIStr $0 "$EXEDIR\$BaseName.ini" "$BaseName" SinglePortableAppInstance
	${If} $0 == false
	${OrIf} $0 == true
		WriteINIStr "$EXEDIR\App\AppInfo\Launcher\$BaseName.ini" Launch SinglePortableAppInstance $0
	${EndIf}

!macroend

${SegmentPre}

	Delete "$EXEDIR\linktemp.ini"
	StrCpy $2 1
	${UserForEachINIPair} "${USERINIPATH}" "${LINKSEC}" $SecString $SecVaule
		ClearErrors
		WriteINIStr "$EXEDIR\linktemp.ini" "LinkTemp" $2 "$SecString|$SecVaule"
		${If} ${Errors}
			MessageBox MB_OK "error"
		${EndIf}
		IntOp $2 $2 + 1
	${UserNextINIPair}
	StrCpy $0 1
	${Do}
		ClearErrors
		ReadINIStr $1 "$EXEDIR\linktemp.ini" "LinkTemp" $0
		${IfThen} ${Errors} ${|} ${ExitDo} ${|}
		${WordFind} "$1" "|" "+1" $SecString
		${WordFind} "$1" "|" "-1" $SecVaule
		ExpandEnvStrings $1 "$SecVaule"
		${PathIsUNC} $1 $DstUncFlag
		${If} $DstUncFlag == "isunc"
			StrCpy $OptFlag "copy"

		${ElseIf} $DstUncFlag == "notunc"
			${If} ${AtLeastWinVista}
				StrCpy $osflag "issym"
				StrCpy $OptFlag "link"
			${Else}
				StrCpy $osflag "isjun"
			${EndIf}
		${EndIf}
		${If} $osflag == "isjun"
			ExpandEnvStrings $1 "$SecString"
			${GetRoot} "$1" $2
			${if} $2 == ""
				StrCpy $1 "$EXEDIR\Data\$SecString"
				ExpandEnvStrings $1 "$1"
				GetFullPathName $1 "$1"
			${Else}
				GetFullPathName $1 "$1"
			${EndIf}
			${PathIsNTFS} $1 $SrcNtfsFlag
			${If} $SrcNtfsFlag == "isntfs"
				StrCpy $OptFlag "link"
			${Else}
				StrCpy $OptFlag "copy"
			${EndIf}
		${EndIf}
		${If} $OptFlag == "link"
			${DstDirCheck} $SecString $SecVaule
			${If} $osflag == "issym"
				ExpandEnvStrings $1 "$SecString"
				${GetRoot} "$1" $2
				${if} $2 == ""
					StrCpy $1 "$EXEDIR\Data\$SecString"
					ExpandEnvStrings $1 "$1"
					GetFullPathName $1 "$1"
				${Else}
					GetFullPathName $1 "$1"
				${EndIf}
				ExpandEnvStrings $2 $SecVaule
				ExecDos::exec /TOSTACK '"$usedexe" ${SYBSWITCH2} "$1" "$2"' '' ''
				Pop $3
				${If} $3 != 0
					StrCpy $OptFlag "copy"
					WriteINIStr "${LINKINIPATH}" ${LINKOPTSEC} ${LINKOPTSEC}$0 '"Failed||issym||$1"'
				${Else}
					WriteINIStr "${LINKINIPATH}" ${LINKOPTSEC} ${LINKOPTSEC}$0 '"Ok||issym||$1"'
				${EndIf}
			${Else}
				ExpandEnvStrings $1 "$SecString"
				${GetRoot} "$1" $2
				${if} $2 == ""
					StrCpy $1 "$EXEDIR\Data\$SecString"
					ExpandEnvStrings $1 "$1"
					GetFullPathName $1 "$1"
				${Else}
					GetFullPathName $1 "$1"
				${EndIf}
				ExpandEnvStrings $2 $SecVaule
				ExecDos::exec /TOSTACK '"$usedexe" ${SYBSWITCH1} "$1" "$2"' '' ''
				Pop $3
				${If} $3 != 0
					StrCpy $OptFlag "copy"
					WriteINIStr "${LINKINIPATH}" ${LINKOPTSEC} ${LINKOPTSEC}$0 '"Failed||isjun||$1"'
				${Else}
					WriteINIStr "${LINKINIPATH}" ${LINKOPTSEC} ${LINKOPTSEC}$0 '"Ok||isjun||$1"'
				${EndIf}
			${EndIf}
		${EndIf}
		${If} $OptFlag == "copy"
			${UserForEachINIPair} "${USERINIPATH}" "${MOVESEC}" $2 $3
				StrLen $4 "$SecString"
				StrCpy $5 "$2" $4
				${If} $5 == $SecString
					WriteINIStr ${LAUNCHERINIPATH} ${MOVESEC} $2 $3
				${EndIf}
			${UserNextINIPair}
			${UserForEachINIPair} "${USERINIPATH}" "${FILESEC}" $2 $3
				StrLen $4 "$SecString"
				StrCpy $5 "$2" $4
				${If} $5 == $SecString
					WriteINIStr ${LAUNCHERINIPATH} ${FILESEC} $2 $3
				${EndIf}
			${UserNextINIPair}
		${ElseIf} $OptFlag == "link"
			${UserForEachINIPair} "${USERINIPATH}" "${MOVESEC}" $2 $3
				StrLen $4 "$SecString"
				StrCpy $5 "$2" $4
				${If} $5 == $SecString
					; WriteINIStr ${USERINIPATH} ${MOVESEC} $2 $3
					DeleteINIStr ${LAUNCHERINIPATH} ${MOVESEC} $2
				${EndIf}
			${UserNextINIPair}
			${UserForEachINIPair} "${USERINIPATH}" "${FILESEC}" $2 $3
				StrLen $4 "$SecString"
				StrCpy $5 "$2" $4
				${If} $5 == $SecString
					; WriteINIStr ${USERINIPATH} ${MOVESEC} $2 $3
					DeleteINIStr ${LAUNCHERINIPATH} ${FILESEC} $2
				${EndIf}
			${UserNextINIPair}
		${EndIf}
		IntOp $0 $0 + 1
	${Loop}

!macroend

${SegmentPreExec}

	ClearErrors
	ReadINIStr $0 "$EXEDIR\App\AppInfo\Launcher\$BaseName.ini" Launch WorkingDirectory
	${IfNot} ${Errors}
	${AndIf} $0 != ""
		ExpandEnvStrings $0 "$0"
		IfFileExists "$0\*.*" +2 0
		CreateDirectory "$0"
	${EndIf}

	ClearErrors
	${ReadLauncherConfig} $0 Environment HOME
	${IfNot} ${Errors}
	${AndIf} $0 != ""
		ExpandEnvStrings $0 "$0"
		IfFileExists "$0\*.*" +2 0
		CreateDirectory "$0"
	${EndIf}

!macroend

${OverrideExecute}

	${EmptyWorkingSet}
	ClearErrors
	${ReadLauncherConfig} $0 Launch HideCommandLineWindow
	${If} $0 == true
		; TODO: do this without a plug-in or at least some way it won't wait with secondary
		ExecDos::exec $ExecString
		Pop $0
	${Else}
		${IfNot} ${Errors}
		${AndIf} $0 != false
			${InvalidValueError} [Launch]:HideCommandLineWindow $0
		${EndIf}
		${If} $WaitForProgram != false
			ExecWait $ExecString
		${Else}
			Exec $ExecString
		${EndIf}
	${EndIf}
	${DebugMsg} "$ExecString has finished."
	
	${If} $WaitForProgram != false
		FORUPDATE:
		; Wait till it's done
		ClearErrors
		${ReadLauncherConfig} $0 Launch WaitForOtherInstances
		${If} $0 == true
		${OrIf} ${Errors}
			${GetFileName} $ProgramExecutable $1
			${DebugMsg} "Waiting till any other instances of $1 and any [Launch]:WaitForEXE[N] values are finished."
			${EmptyWorkingSet}
			${Do}
				${ProcessWaitClose} $1 -1 $R9
				${IfThen} $R9 > 0 ${|} ${Continue} ${|}
				StrCpy $0 1
				${Do}
					ClearErrors
					${ReadLauncherConfig} $2 Launch WaitForEXE$0
					${IfThen} ${Errors} ${|} ${ExitDo} ${|}
					${ProcessWaitClose} $2 -1 $R9
					${IfThen} $R9 > 0 ${|} ${ExitDo} ${|}
					IntOp $0 $0 + 1
				${Loop}
			${LoopWhile} $R9 > 0
			${DebugMsg} "All instances are finished."
		${ElseIf} $0 != false
			${InvalidValueError} [Launch]:WaitForOtherInstances $0
		${EndIf}
		${ProcessWait} "$1" "6000" $3
		${IfThen} $3 > 0 ${|} Goto FORUPDATE ${|}
	${EndIf}

!macroend

${SegmentPostPrimary}

	StrCpy $0 1
	${Do}
		ClearErrors
		ReadINIStr $1 "$EXEDIR\linktemp.ini" "LinkTemp" $0
		${IfThen} ${Errors} ${|} ${ExitDo} ${|}
		${WordFind} "$1" "|" "+1" $SecString
		${WordFind} "$1" "|" "-1" $SecVaule
		; MessageBox MB_OK "$SecString$\n$SecVaule"
		ExpandEnvStrings $1 "$SecVaule"
		RMDir "$1"
		${If} ${FileExists} "$1_$BaseName"
			Rename "$1_$BaseName" "$1"
		${EndIf}
		IntOp $0 $0 + 1
	${Loop}
	Delete "$EXEDIR\linktemp.ini"

!macroend


